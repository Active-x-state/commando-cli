#!/bin/bash
# @description The Commando.io command-line interface.
#
# Commando.io
# Copyright 2015 NodeSocket, LLC.
# All rights reserved.

set -e

VERSION="1.1"

COMMAND=$1
NETRC=~/.netrc

function check_auth {
    if [ ! -e $NETRC ] || ! grep -Fxq "machine api.commando.io" $NETRC; then
        printf "You are not authenticated. To authenticate, run:\n\n\tcommando auth"
        exit 1
    fi
}

# First parameter (required): url
# Second parameter [optional]: Post data
function curl_request() {
    CURL_VERSION=$(curl --version | sed -n 1p)

    if [ "$2" != "" ]; then
        curl --silent --netrc --user-agent "Commando-Cli/$VERSION $USER $CURL_VERSION" "https://api.commando.io/v1/$1" -X POST --data "$2"
    else
        curl --silent --netrc --user-agent "Commando-Cli/$VERSION $USER $CURL_VERSION" "https://api.commando.io/v1/$1"
    fi
}

case "$COMMAND" in
    "auth")

        if [ -e $NETRC ] && grep -Fxq "machine api.commando.io" $NETRC; then
            ACCOUNT_ALIAS=$(awk '/api.commando.io/{getline; print $2}' $NETRC)
            printf "You are already authenticated on %s.commando.io. To unauthenticate, run:\n\n\tcommando unauth" "$ACCOUNT_ALIAS"
            exit 1
        fi

        read -p "Enter your account alias: " ACCOUNT_ALIAS
        read -s -p "Provide a valid API token secret key for $ACCOUNT_ALIAS.commando.io: " SECRET_KEY

        cat <<EOF >> $NETRC
machine api.commando.io
  login $ACCOUNT_ALIAS
  password $SECRET_KEY
EOF

        chmod 600 $NETRC

        ;;

    "unauth")

        check_auth

        TMP=$(mktemp ~/.netrc.XXXXXX)
        sed '/^machine api.commando.io$/{N;N;d;}' $NETRC > "$TMP"
        mv "$TMP" "$NETRC"
        rm -f "$TMP"

        ;;

    "servers")

        check_auth

        SERVER_ID=$2

        if [ "$SERVER_ID" == "" ]; then
            curl_request "servers"
        else
            curl_request "servers/$SERVER_ID"
        fi

        ;;

    "groups")

        check_auth

        GROUP_ID=$2

        if [ "$GROUP_ID" == "" ]; then
            curl_request "groups"
        else
            curl_request "groups/$GROUP_ID"
        fi

        ;;

    "recipes")

        check_auth

        RECIPE_ID=$2

        if [ "$RECIPE_ID" == "" ]; then
            curl_request "recipes"
        else
            curl_request "recipes/$RECIPE_ID"
        fi

        ;;

    "execute")

        RECIPE_ID=$2

        if [ "$RECIPE_ID" == "" ]; then
            printf "Missing required argument recipe id.\n\nUsage:\n\tcommando execute <recipe-id> (--server=<server-id> | --groups=<group-id>,<group-id>,...)"
            exit 1
        fi

        check_auth

        OPTS=$3

        # Split on equals
        SPLIT=(${OPTS//=/ })

        # If the array length is greater than 0
        if [ ${#SPLIT[@]} -gt 0 ]; then
            # --server option set
            if [ ${SPLIT[0]} == "--server" ]; then
                SERVER=${SPLIT[1]}
            # --groups option set
            elif [ ${SPLIT[0]} == "--groups" ]; then
                GROUP=${SPLIT[1]}
            fi
        fi

        if [ "$SERVER" != "" ]; then
            curl_request "recipes/$RECIPE_ID/execute" "server=$SERVER"
        elif [ "$GROUP" != "" ]; then
            curl_request "recipes/$RECIPE_ID/execute" "groups[]=$GROUP"
        else
            printf "Missing or invalid option.\n\nUsage:\n\tcommando execute <recipe-id> (--server=<server-id> | --groups=<group-id>,<group-id>,...)"
            exit 1
        fi

        ;;

    "execution-queue")

        EXECUTION_QUEUE_ID=$2

        if [ "$EXECUTION_QUEUE_ID" == "" ]; then
            printf "Missing required argument execution queue id.\n\nUsage:\n\tcommando execution-queue <execution-queue-id>"
            exit 1
        fi

        check_auth

        curl_request "execution-queue/$EXECUTION_QUEUE_ID"

        ;;

    "executions")

        EXECUTION_ID=$2

        if [ "$EXECUTION_ID" == "" ]; then
            printf "Missing required argument execution id.\n\nUsage:\n\tcommando executions <execution-id>"
            exit 1
        fi

        check_auth

        curl_request "executions/$EXECUTION_ID"

        ;;

    "version" | "-v" | "--version")

        echo $VERSION

        ;;

    *)

        printf "Usage:\n\tcommando auth\n\tcommando unauth\n\tcommando servers [<server-id>]\n\tcommando groups [<group-id>]\n\tcommando recipes [<recipe-id>]\n\tcommando execute <recipe-id> (--server=<server-id> | --groups=<group-id>,<group-id>,...)\n\tcommando execution-queue <execution-queue-id>\n\tcommando executions <execution-id>\n\tcommando (version | --version)\n\tcommando (help | --help)"
        exit 1
        ;;

esac
